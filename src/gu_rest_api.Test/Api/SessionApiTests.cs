/* 
 * Golem unlimited low level hub API
 *
 * API description in Markdown.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using GURestApi.Client;
using GURestApi.Api;
using GURestApi.Model;

namespace GURestApi.Test
{
    /// <summary>
    ///  Class for testing SessionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SessionApiTests
    {
        private SessionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SessionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SessionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SessionApi
            //Assert.IsInstanceOfType(typeof(SessionApi), instance, "instance is a SessionApi");
        }

        
        /// <summary>
        /// Test AddSessionPeers
        /// </summary>
        [Test]
        public void AddSessionPeersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //List<string> peerSet = null;
            //var response = instance.AddSessionPeers(sessionId, peerSet);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test CreateBlob
        /// </summary>
        [Test]
        public void CreateBlobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //System.IO.Stream body = null;
            //var response = instance.CreateBlob(sessionId, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateDeployment
        /// </summary>
        [Test]
        public void CreateDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //string nodeId = null;
            //DeploymentInfo deploymentSpec = null;
            //var response = instance.CreateDeployment(sessionId, nodeId, deploymentSpec);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CreateSession
        /// </summary>
        [Test]
        public void CreateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HubSession body = null;
            //var response = instance.CreateSession(body);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test DeleteBlob
        /// </summary>
        [Test]
        public void DeleteBlobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //long? blobId = null;
            //instance.DeleteBlob(sessionId, blobId);
            
        }
        
        /// <summary>
        /// Test DeleteDeployment
        /// </summary>
        [Test]
        public void DeleteDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //string nodeId = null;
            //string deploymentId = null;
            //instance.DeleteDeployment(sessionId, nodeId, deploymentId);
            
        }
        
        /// <summary>
        /// Test DeleteSession
        /// </summary>
        [Test]
        public void DeleteSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //instance.DeleteSession(sessionId);
            
        }
        
        /// <summary>
        /// Test DownloadBlob
        /// </summary>
        [Test]
        public void DownloadBlobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //long? blobId = null;
            //var response = instance.DownloadBlob(sessionId, blobId);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetConfig
        /// </summary>
        [Test]
        public void GetConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //var response = instance.GetConfig(sessionId);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GetHubInfo
        /// </summary>
        [Test]
        public void GetHubInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetHubInfo();
            //Assert.IsInstanceOf<HubInfo> (response, "response is HubInfo");
        }
        
        /// <summary>
        /// Test GetSession
        /// </summary>
        [Test]
        public void GetSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //var response = instance.GetSession(sessionId);
            //Assert.IsInstanceOf<HubSession> (response, "response is HubSession");
        }
        
        /// <summary>
        /// Test ListBlobs
        /// </summary>
        [Test]
        public void ListBlobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //var response = instance.ListBlobs(sessionId);
            //Assert.IsInstanceOf<List<BlobInfo>> (response, "response is List<BlobInfo>");
        }
        
        /// <summary>
        /// Test ListSessionPeers
        /// </summary>
        [Test]
        public void ListSessionPeersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //var response = instance.ListSessionPeers(sessionId);
            //Assert.IsInstanceOf<List<PeerInfo>> (response, "response is List<PeerInfo>");
        }
        
        /// <summary>
        /// Test ListSessions
        /// </summary>
        [Test]
        public void ListSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListSessions(limit, offset);
            //Assert.IsInstanceOf<List<HubSession>> (response, "response is List<HubSession>");
        }
        
        /// <summary>
        /// Test SetConfig
        /// </summary>
        [Test]
        public void SetConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //Dictionary<string, Object> config = null;
            //var response = instance.SetConfig(sessionId, config);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test UpdateDeployment
        /// </summary>
        [Test]
        public void UpdateDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //string nodeId = null;
            //string deploymentId = null;
            //List<Command> commands = null;
            //instance.UpdateDeployment(sessionId, nodeId, deploymentId, commands);
            
        }
        
        /// <summary>
        /// Test UpdateSession
        /// </summary>
        [Test]
        public void UpdateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //HubSessionCommand changes = null;
            //instance.UpdateSession(sessionId, changes);
            
        }
        
        /// <summary>
        /// Test UploadBlob
        /// </summary>
        [Test]
        public void UploadBlobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sessionId = null;
            //long? blobId = null;
            //System.IO.Stream body = null;
            //instance.UploadBlob(sessionId, blobId, body);
            
        }
        
    }

}
