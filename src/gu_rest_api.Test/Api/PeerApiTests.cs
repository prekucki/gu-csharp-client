/* 
 * Golem unlimited low level hub API
 *
 * API description in Markdown.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using GURestApi.Client;
using GURestApi.Api;
using GURestApi.Model;

namespace GURestApi.Test
{
    /// <summary>
    ///  Class for testing PeerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PeerApiTests
    {
        private PeerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PeerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PeerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PeerApi
            //Assert.IsInstanceOfType(typeof(PeerApi), instance, "instance is a PeerApi");
        }

        
        /// <summary>
        /// Test CreateDeployment
        /// </summary>
        [Test]
        public void CreateDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nodeId = null;
            //DeploymentSpec spec = null;
            //var response = instance.CreateDeployment(nodeId, spec);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DropDeployment
        /// </summary>
        [Test]
        public void DropDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nodeId = null;
            //string deploymentId = null;
            //instance.DropDeployment(nodeId, deploymentId);
            
        }
        
        /// <summary>
        /// Test GetHubInfo
        /// </summary>
        [Test]
        public void GetHubInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetHubInfo();
            //Assert.IsInstanceOf<HubInfo> (response, "response is HubInfo");
        }
        
        /// <summary>
        /// Test GetPeerDetails
        /// </summary>
        [Test]
        public void GetPeerDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nodeId = null;
            //var response = instance.GetPeerDetails(nodeId);
            //Assert.IsInstanceOf<PeerDetails> (response, "response is PeerDetails");
        }
        
        /// <summary>
        /// Test ListDeployments
        /// </summary>
        [Test]
        public void ListDeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nodeId = null;
            //var response = instance.ListDeployments(nodeId);
            //Assert.IsInstanceOf<List<DeploymentInfo>> (response, "response is List<DeploymentInfo>");
        }
        
        /// <summary>
        /// Test ListPeers
        /// </summary>
        [Test]
        public void ListPeersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListPeers(offset, limit);
            //Assert.IsInstanceOf<List<PeerInfo>> (response, "response is List<PeerInfo>");
        }
        
        /// <summary>
        /// Test UpdateDeployment
        /// </summary>
        [Test]
        public void UpdateDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nodeId = null;
            //string deploymentId = null;
            //List<Command> commands = null;
            //var response = instance.UpdateDeployment(nodeId, deploymentId, commands);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
    }

}
