/* 
 * Golem unlimited low level hub API
 *
 * API description in Markdown.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using GURestApi.Client;
using GURestApi.Model;
using System.Threading.Tasks;

namespace GURestApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>string</returns>
        string CreateDeployment (string nodeId, DeploymentSpec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateDeploymentWithHttpInfo (string nodeId, DeploymentSpec spec);
        /// <summary>
        /// Removes deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns></returns>
        void DropDeployment (string nodeId, string deploymentId);

        /// <summary>
        /// Removes deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DropDeploymentWithHttpInfo (string nodeId, string deploymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HubInfo</returns>
        HubInfo GetHubInfo ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HubInfo</returns>
        ApiResponse<HubInfo> GetHubInfoWithHttpInfo ();
        /// <summary>
        /// Returns detailed peer info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>PeerDetails</returns>
        PeerDetails GetPeerDetails (string nodeId);

        /// <summary>
        /// Returns detailed peer info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>ApiResponse of PeerDetails</returns>
        ApiResponse<PeerDetails> GetPeerDetailsWithHttpInfo (string nodeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>List&lt;DeploymentInfo&gt;</returns>
        List<DeploymentInfo> ListDeployments (string nodeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>ApiResponse of List&lt;DeploymentInfo&gt;</returns>
        ApiResponse<List<DeploymentInfo>> ListDeploymentsWithHttpInfo (string nodeId);
        /// <summary>
        /// Returns a list hub peers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>List&lt;PeerInfo&gt;</returns>
        List<PeerInfo> ListPeers (int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list hub peers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;PeerInfo&gt;</returns>
        ApiResponse<List<PeerInfo>> ListPeersWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> UpdateDeployment (string nodeId, string deploymentId, List<Command> commands = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> UpdateDeploymentWithHttpInfo (string nodeId, string deploymentId, List<Command> commands = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateDeploymentAsync (string nodeId, DeploymentSpec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateDeploymentAsyncWithHttpInfo (string nodeId, DeploymentSpec spec);
        /// <summary>
        /// Removes deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DropDeploymentAsync (string nodeId, string deploymentId);

        /// <summary>
        /// Removes deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DropDeploymentAsyncWithHttpInfo (string nodeId, string deploymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HubInfo</returns>
        System.Threading.Tasks.Task<HubInfo> GetHubInfoAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HubInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubInfo>> GetHubInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Returns detailed peer info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of PeerDetails</returns>
        System.Threading.Tasks.Task<PeerDetails> GetPeerDetailsAsync (string nodeId);

        /// <summary>
        /// Returns detailed peer info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of ApiResponse (PeerDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeerDetails>> GetPeerDetailsAsyncWithHttpInfo (string nodeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of List&lt;DeploymentInfo&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentInfo>> ListDeploymentsAsync (string nodeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentInfo>>> ListDeploymentsAsyncWithHttpInfo (string nodeId);
        /// <summary>
        /// Returns a list hub peers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of List&lt;PeerInfo&gt;</returns>
        System.Threading.Tasks.Task<List<PeerInfo>> ListPeersAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list hub peers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;PeerInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PeerInfo>>> ListPeersAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> UpdateDeploymentAsync (string nodeId, string deploymentId, List<Command> commands = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> UpdateDeploymentAsyncWithHttpInfo (string nodeId, string deploymentId, List<Command> commands = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeerApi : IPeerApi
    {
        private GURestApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PeerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeerApi(String basePath)
        {
            this.Configuration = new GURestApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = GURestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeerApi"/> class
        /// </summary>
        /// <returns></returns>
        public PeerApi()
        {
            this.Configuration = GURestApi.Client.Configuration.Default;

            ExceptionFactory = GURestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PeerApi(GURestApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = GURestApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = GURestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GURestApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GURestApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>string</returns>
        public string CreateDeployment (string nodeId, DeploymentSpec spec)
        {
             ApiResponse<string> localVarResponse = CreateDeploymentWithHttpInfo(nodeId, spec);
            return localVarResponse.Data.Replace("\"", null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CreateDeploymentWithHttpInfo (string nodeId, DeploymentSpec spec)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->CreateDeployment");
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling PeerApi->CreateDeployment");

            var localVarPath = "/peers/{nodeId}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateDeploymentAsync (string nodeId, DeploymentSpec spec)
        {
            ApiResponse<string> localVarResponse = await CreateDeploymentAsyncWithHttpInfo(nodeId, spec);
            return localVarResponse.Data.Replace("\"",null);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateDeploymentAsyncWithHttpInfo (string nodeId, DeploymentSpec spec)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->CreateDeployment");
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling PeerApi->CreateDeployment");

            var localVarPath = "/peers/{nodeId}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Removes deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns></returns>
        public void DropDeployment (string nodeId, string deploymentId)
        {
             DropDeploymentWithHttpInfo(nodeId, deploymentId);
        }

        /// <summary>
        /// Removes deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DropDeploymentWithHttpInfo (string nodeId, string deploymentId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->DropDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling PeerApi->DropDeployment");

            var localVarPath = "/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DropDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DropDeploymentAsync (string nodeId, string deploymentId)
        {
             await DropDeploymentAsyncWithHttpInfo(nodeId, deploymentId);

        }

        /// <summary>
        /// Removes deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DropDeploymentAsyncWithHttpInfo (string nodeId, string deploymentId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->DropDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling PeerApi->DropDeployment");

            var localVarPath = "/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DropDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HubInfo</returns>
        public HubInfo GetHubInfo ()
        {
             ApiResponse<HubInfo> localVarResponse = GetHubInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HubInfo</returns>
        public ApiResponse< HubInfo > GetHubInfoWithHttpInfo ()
        {

            var localVarPath = "/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHubInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HubInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HubInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HubInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HubInfo</returns>
        public async System.Threading.Tasks.Task<HubInfo> GetHubInfoAsync ()
        {
             ApiResponse<HubInfo> localVarResponse = await GetHubInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HubInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HubInfo>> GetHubInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHubInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HubInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HubInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HubInfo)));
        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>PeerDetails</returns>
        public PeerDetails GetPeerDetails (string nodeId)
        {
             ApiResponse<PeerDetails> localVarResponse = GetPeerDetailsWithHttpInfo(nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>ApiResponse of PeerDetails</returns>
        public ApiResponse< PeerDetails > GetPeerDetailsWithHttpInfo (string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->GetPeerDetails");

            var localVarPath = "/peers/{nodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPeerDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeerDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PeerDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeerDetails)));
        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of PeerDetails</returns>
        public async System.Threading.Tasks.Task<PeerDetails> GetPeerDetailsAsync (string nodeId)
        {
             ApiResponse<PeerDetails> localVarResponse = await GetPeerDetailsAsyncWithHttpInfo(nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of ApiResponse (PeerDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeerDetails>> GetPeerDetailsAsyncWithHttpInfo (string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->GetPeerDetails");

            var localVarPath = "/peers/{nodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPeerDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeerDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PeerDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeerDetails)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>List&lt;DeploymentInfo&gt;</returns>
        public List<DeploymentInfo> ListDeployments (string nodeId)
        {
             ApiResponse<List<DeploymentInfo>> localVarResponse = ListDeploymentsWithHttpInfo(nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>ApiResponse of List&lt;DeploymentInfo&gt;</returns>
        public ApiResponse< List<DeploymentInfo> > ListDeploymentsWithHttpInfo (string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->ListDeployments");

            var localVarPath = "/peers/{nodeId}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentInfo>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of List&lt;DeploymentInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentInfo>> ListDeploymentsAsync (string nodeId)
        {
             ApiResponse<List<DeploymentInfo>> localVarResponse = await ListDeploymentsAsyncWithHttpInfo(nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeploymentInfo>>> ListDeploymentsAsyncWithHttpInfo (string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->ListDeployments");

            var localVarPath = "/peers/{nodeId}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentInfo>)));
        }

        /// <summary>
        /// Returns a list hub peers. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>List&lt;PeerInfo&gt;</returns>
        public List<PeerInfo> ListPeers (int? offset = null, int? limit = null)
        {
             ApiResponse<List<PeerInfo>> localVarResponse = ListPeersWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list hub peers. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;PeerInfo&gt;</returns>
        public ApiResponse< List<PeerInfo> > ListPeersWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PeerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PeerInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PeerInfo>)));
        }

        /// <summary>
        /// Returns a list hub peers. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of List&lt;PeerInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<PeerInfo>> ListPeersAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<List<PeerInfo>> localVarResponse = await ListPeersAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list hub peers. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;PeerInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PeerInfo>>> ListPeersAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PeerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PeerInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PeerInfo>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> UpdateDeployment (string nodeId, string deploymentId, List<Command> commands = null)
        {
             ApiResponse<List<string>> localVarResponse = UpdateDeploymentWithHttpInfo(nodeId, deploymentId, commands);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > UpdateDeploymentWithHttpInfo (string nodeId, string deploymentId, List<Command> commands = null)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->UpdateDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling PeerApi->UpdateDeployment");

            var localVarPath = "/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };

            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (commands != null && commands.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commands); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commands; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> UpdateDeploymentAsync (string nodeId, string deploymentId, List<Command> commands = null)
        {
             ApiResponse<List<string>> localVarResponse = await UpdateDeploymentAsyncWithHttpInfo(nodeId, deploymentId, commands);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> UpdateDeploymentAsyncWithHttpInfo (string nodeId, string deploymentId, List<Command> commands = null)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->UpdateDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling PeerApi->UpdateDeployment");

            var localVarPath = "/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (commands != null && commands.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commands); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commands; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>PeerDetails</returns>
        public PeerHardware GetPeerHardware(string nodeId)
        {
            ApiResponse<PeerHardware> localVarResponse = GetPeerHardwareWithHttpInfo(nodeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>ApiResponse of PeerDetails</returns>
        public ApiResponse<PeerHardware> GetPeerHardwareWithHttpInfo(string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->GetPeerDetails");

            var localVarPath = "/peers/{nodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            localVarPostBody = "{\"b\":null}"; // http body (model) parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPeerDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            PeerHardwareWrapper phWrap = (PeerHardwareWrapper)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeerHardwareWrapper));

            return new ApiResponse<PeerHardware>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)), phWrap?.Hardware);
        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of PeerDetails</returns>
        public async System.Threading.Tasks.Task<PeerHardware> GetPeerHardwareAsync(string nodeId)
        {
            ApiResponse<PeerHardware> localVarResponse = await GetPeerHardwareAsyncWithHttpInfo(nodeId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns detailed peer info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <returns>Task of ApiResponse (PeerDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeerHardware>> GetPeerHardwareAsyncWithHttpInfo(string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling PeerApi->GetPeerDetails");

            var localVarPath = "/peers/send-to/{nodeId}/19354";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            localVarPostBody = "{\"b\":null}"; // http body (model) parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPeerDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            PeerHardwareWrapper phWrap = (PeerHardwareWrapper)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeerHardwareWrapper));

            return new ApiResponse<PeerHardware>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)), phWrap?.Hardware);
        }
    }
}
