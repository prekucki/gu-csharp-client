/* 
 * Golem unlimited low level hub API
 *
 * API description in Markdown.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using GURestApi.Client;
using GURestApi.Model;

namespace GURestApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Manually adds peers to hub session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> AddSessionPeers (long? sessionId, List<string> peerSet);

        /// <summary>
        /// Manually adds peers to hub session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> AddSessionPeersWithHttpInfo (long? sessionId, List<string> peerSet);
        /// <summary>
        /// Creates new lob
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateBlob (long? sessionId, System.IO.Stream body = null);

        /// <summary>
        /// Creates new lob
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateBlobWithHttpInfo (long? sessionId, System.IO.Stream body = null);
        /// <summary>
        /// Creates new deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>string</returns>
        string CreateDeployment (long? sessionId, string nodeId, DeploymentInfo deploymentSpec);

        /// <summary>
        /// Creates new deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateDeploymentWithHttpInfo (long? sessionId, string nodeId, DeploymentInfo deploymentSpec);
        /// <summary>
        /// Creates new hub session.
        /// </summary>
        /// <remarks>
        /// Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>long?</returns>
        long? CreateSession (HubSession body);

        /// <summary>
        /// Creates new hub session.
        /// </summary>
        /// <remarks>
        /// Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CreateSessionWithHttpInfo (HubSession body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns></returns>
        void DeleteBlob (long? sessionId, long? blobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBlobWithHttpInfo (long? sessionId, long? blobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns></returns>
        void DeleteDeployment (long? sessionId, string nodeId, string deploymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeploymentWithHttpInfo (long? sessionId, string nodeId, string deploymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns></returns>
        void DeleteSession (long? sessionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSessionWithHttpInfo (long? sessionId);
        /// <summary>
        /// Downloads binary content from the hub
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadBlob (long? sessionId, long? blobId);

        /// <summary>
        /// Downloads binary content from the hub
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadBlobWithHttpInfo (long? sessionId, long? blobId);
        /// <summary>
        /// Gets configuration from stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetConfig (long? sessionId);

        /// <summary>
        /// Gets configuration from stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetConfigWithHttpInfo (long? sessionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HubInfo</returns>
        HubInfo GetHubInfo ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HubInfo</returns>
        ApiResponse<HubInfo> GetHubInfoWithHttpInfo ();
        /// <summary>
        /// Gets hub session info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>HubSession</returns>
        HubSession GetSession (long? sessionId);

        /// <summary>
        /// Gets hub session info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of HubSession</returns>
        ApiResponse<HubSession> GetSessionWithHttpInfo (long? sessionId);
        /// <summary>
        /// Lists currently allocated lobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>List&lt;BlobInfo&gt;</returns>
        List<BlobInfo> ListBlobs (long? sessionId);

        /// <summary>
        /// Lists currently allocated lobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of List&lt;BlobInfo&gt;</returns>
        ApiResponse<List<BlobInfo>> ListBlobsWithHttpInfo (long? sessionId);
        /// <summary>
        /// List session peers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>List&lt;PeerInfo&gt;</returns>
        List<PeerInfo> ListSessionPeers (long? sessionId);

        /// <summary>
        /// List session peers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of List&lt;PeerInfo&gt;</returns>
        ApiResponse<List<PeerInfo>> ListSessionPeersWithHttpInfo (long? sessionId);
        /// <summary>
        /// Lists current hub sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>List&lt;HubSession&gt;</returns>
        List<HubSession> ListSessions (int? limit = null, int? offset = null);

        /// <summary>
        /// Lists current hub sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;HubSession&gt;</returns>
        ApiResponse<List<HubSession>> ListSessionsWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// Sets configuration stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>long?</returns>
        long? SetConfig (long? sessionId, Dictionary<string, Object> config);

        /// <summary>
        /// Sets configuration stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> SetConfigWithHttpInfo (long? sessionId, Dictionary<string, Object> config);
        /// <summary>
        /// Sends multiple commands for peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns></returns>
        void UpdateDeployment (long? sessionId, string nodeId, string deploymentId, List<Command> commands);

        /// <summary>
        /// Sends multiple commands for peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDeploymentWithHttpInfo (long? sessionId, string nodeId, string deploymentId, List<Command> commands);
        /// <summary>
        /// Hub session update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns></returns>
        void UpdateSession (long? sessionId, HubSessionCommand changes = null);

        /// <summary>
        /// Hub session update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSessionWithHttpInfo (long? sessionId, HubSessionCommand changes = null);
        /// <summary>
        /// Uploads a binary content to the hub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UploadBlob (long? sessionId, long? blobId, System.IO.Stream body = null);

        /// <summary>
        /// Uploads a binary content to the hub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadBlobWithHttpInfo (long? sessionId, long? blobId, System.IO.Stream body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Manually adds peers to hub session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> AddSessionPeersAsync (long? sessionId, List<string> peerSet);

        /// <summary>
        /// Manually adds peers to hub session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> AddSessionPeersAsyncWithHttpInfo (long? sessionId, List<string> peerSet);
        /// <summary>
        /// Creates new lob
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateBlobAsync (long? sessionId, System.IO.Stream body = null);

        /// <summary>
        /// Creates new lob
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBlobAsyncWithHttpInfo (long? sessionId, System.IO.Stream body = null);
        /// <summary>
        /// Creates new deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateDeploymentAsync (long? sessionId, string nodeId, DeploymentInfo deploymentSpec);

        /// <summary>
        /// Creates new deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateDeploymentAsyncWithHttpInfo (long? sessionId, string nodeId, DeploymentInfo deploymentSpec);
        /// <summary>
        /// Creates new hub session.
        /// </summary>
        /// <remarks>
        /// Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CreateSessionAsync (HubSession body);

        /// <summary>
        /// Creates new hub session.
        /// </summary>
        /// <remarks>
        /// Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CreateSessionAsyncWithHttpInfo (HubSession body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBlobAsync (long? sessionId, long? blobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBlobAsyncWithHttpInfo (long? sessionId, long? blobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeploymentAsync (long? sessionId, string nodeId, string deploymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentAsyncWithHttpInfo (long? sessionId, string nodeId, string deploymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSessionAsync (long? sessionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSessionAsyncWithHttpInfo (long? sessionId);
        /// <summary>
        /// Downloads binary content from the hub
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadBlobAsync (long? sessionId, long? blobId);

        /// <summary>
        /// Downloads binary content from the hub
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadBlobAsyncWithHttpInfo (long? sessionId, long? blobId);
        /// <summary>
        /// Gets configuration from stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetConfigAsync (long? sessionId);

        /// <summary>
        /// Gets configuration from stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetConfigAsyncWithHttpInfo (long? sessionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HubInfo</returns>
        System.Threading.Tasks.Task<HubInfo> GetHubInfoAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HubInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubInfo>> GetHubInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Gets hub session info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of HubSession</returns>
        System.Threading.Tasks.Task<HubSession> GetSessionAsync (long? sessionId);

        /// <summary>
        /// Gets hub session info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (HubSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubSession>> GetSessionAsyncWithHttpInfo (long? sessionId);
        /// <summary>
        /// Lists currently allocated lobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of List&lt;BlobInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BlobInfo>> ListBlobsAsync (long? sessionId);

        /// <summary>
        /// Lists currently allocated lobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (List&lt;BlobInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlobInfo>>> ListBlobsAsyncWithHttpInfo (long? sessionId);
        /// <summary>
        /// List session peers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of List&lt;PeerInfo&gt;</returns>
        System.Threading.Tasks.Task<List<PeerInfo>> ListSessionPeersAsync (long? sessionId);

        /// <summary>
        /// List session peers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (List&lt;PeerInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PeerInfo>>> ListSessionPeersAsyncWithHttpInfo (long? sessionId);
        /// <summary>
        /// Lists current hub sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of List&lt;HubSession&gt;</returns>
        System.Threading.Tasks.Task<List<HubSession>> ListSessionsAsync (int? limit = null, int? offset = null);

        /// <summary>
        /// Lists current hub sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;HubSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HubSession>>> ListSessionsAsyncWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// Sets configuration stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> SetConfigAsync (long? sessionId, Dictionary<string, Object> config);

        /// <summary>
        /// Sets configuration stash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> SetConfigAsyncWithHttpInfo (long? sessionId, Dictionary<string, Object> config);
        /// <summary>
        /// Sends multiple commands for peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDeploymentAsync (long? sessionId, string nodeId, string deploymentId, List<Command> commands);

        /// <summary>
        /// Sends multiple commands for peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDeploymentAsyncWithHttpInfo (long? sessionId, string nodeId, string deploymentId, List<Command> commands);
        /// <summary>
        /// Hub session update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSessionAsync (long? sessionId, HubSessionCommand changes = null);

        /// <summary>
        /// Hub session update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSessionAsyncWithHttpInfo (long? sessionId, HubSessionCommand changes = null);
        /// <summary>
        /// Uploads a binary content to the hub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadBlobAsync (long? sessionId, long? blobId, System.IO.Stream body = null);

        /// <summary>
        /// Uploads a binary content to the hub.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadBlobAsyncWithHttpInfo (long? sessionId, long? blobId, System.IO.Stream body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionApi : ISessionApi
    {
        private GURestApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi(String basePath)
        {
            this.Configuration = new GURestApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = GURestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionApi()
        {
            this.Configuration = GURestApi.Client.Configuration.Default;

            ExceptionFactory = GURestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionApi(GURestApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = GURestApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = GURestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GURestApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GURestApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Manually adds peers to hub session 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> AddSessionPeers (long? sessionId, List<string> peerSet)
        {
             ApiResponse<List<string>> localVarResponse = AddSessionPeersWithHttpInfo(sessionId, peerSet);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Manually adds peers to hub session 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > AddSessionPeersWithHttpInfo (long? sessionId, List<string> peerSet)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->AddSessionPeers");
            // verify the required parameter 'peerSet' is set
            if (peerSet == null)
                throw new ApiException(400, "Missing required parameter 'peerSet' when calling SessionApi->AddSessionPeers");

            var localVarPath = "/sessions/{sessionId}/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (peerSet != null && peerSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerSet; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSessionPeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Manually adds peers to hub session 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> AddSessionPeersAsync (long? sessionId, List<string> peerSet)
        {
             ApiResponse<List<string>> localVarResponse = await AddSessionPeersAsyncWithHttpInfo(sessionId, peerSet);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Manually adds peers to hub session 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="peerSet"></param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> AddSessionPeersAsyncWithHttpInfo (long? sessionId, List<string> peerSet)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->AddSessionPeers");
            // verify the required parameter 'peerSet' is set
            if (peerSet == null)
                throw new ApiException(400, "Missing required parameter 'peerSet' when calling SessionApi->AddSessionPeers");

            var localVarPath = "/sessions/{sessionId}/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (peerSet != null && peerSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerSet; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSessionPeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Creates new lob 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateBlob (long? sessionId, System.IO.Stream body = null)
        {
             ApiResponse<Object> localVarResponse = CreateBlobWithHttpInfo(sessionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new lob 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateBlobWithHttpInfo (long? sessionId, System.IO.Stream body = null)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->CreateBlob");

            var localVarPath = "/sessions/{sessionId}/blobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (body != null) localVarFileParams.Add("body", this.Configuration.ApiClient.ParameterToFile("body", body));

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates new lob 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateBlobAsync (long? sessionId, System.IO.Stream body = null)
        {
             ApiResponse<Object> localVarResponse = await CreateBlobAsyncWithHttpInfo(sessionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new lob 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateBlobAsyncWithHttpInfo (long? sessionId, System.IO.Stream body = null)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->CreateBlob");

            var localVarPath = "/sessions/{sessionId}/blobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (body != null) localVarFileParams.Add("body", this.Configuration.ApiClient.ParameterToFile("body", body));

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates new deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>string</returns>
        public string CreateDeployment (long? sessionId, string nodeId, DeploymentInfo deploymentSpec)
        {
             ApiResponse<string> localVarResponse = CreateDeploymentWithHttpInfo(sessionId, nodeId, deploymentSpec);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CreateDeploymentWithHttpInfo (long? sessionId, string nodeId, DeploymentInfo deploymentSpec)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->CreateDeployment");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SessionApi->CreateDeployment");
            // verify the required parameter 'deploymentSpec' is set
            if (deploymentSpec == null)
                throw new ApiException(400, "Missing required parameter 'deploymentSpec' when calling SessionApi->CreateDeployment");

            var localVarPath = "/sessions/{sessionId}/peers/{nodeId}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentSpec != null && deploymentSpec.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deploymentSpec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deploymentSpec; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Creates new deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateDeploymentAsync (long? sessionId, string nodeId, DeploymentInfo deploymentSpec)
        {
             ApiResponse<string> localVarResponse = await CreateDeploymentAsyncWithHttpInfo(sessionId, nodeId, deploymentSpec);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new deployment 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentSpec"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateDeploymentAsyncWithHttpInfo (long? sessionId, string nodeId, DeploymentInfo deploymentSpec)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->CreateDeployment");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SessionApi->CreateDeployment");
            // verify the required parameter 'deploymentSpec' is set
            if (deploymentSpec == null)
                throw new ApiException(400, "Missing required parameter 'deploymentSpec' when calling SessionApi->CreateDeployment");

            var localVarPath = "/sessions/{sessionId}/peers/{nodeId}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentSpec != null && deploymentSpec.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deploymentSpec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deploymentSpec; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Creates new hub session. Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>long?</returns>
        public long? CreateSession (HubSession body)
        {
             ApiResponse<long?> localVarResponse = CreateSessionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new hub session. Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CreateSessionWithHttpInfo (HubSession body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SessionApi->CreateSession");

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Creates new hub session. Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CreateSessionAsync (HubSession body)
        {
             ApiResponse<long?> localVarResponse = await CreateSessionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new hub session. Allowed fileds:  * name        - human readable session name * expires     - session expiration timestamp * allocation  - resource allocation mode.
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CreateSessionAsyncWithHttpInfo (HubSession body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SessionApi->CreateSession");

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns></returns>
        public void DeleteBlob (long? sessionId, long? blobId)
        {
             DeleteBlobWithHttpInfo(sessionId, blobId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBlobWithHttpInfo (long? sessionId, long? blobId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DeleteBlob");
            // verify the required parameter 'blobId' is set
            if (blobId == null)
                throw new ApiException(400, "Missing required parameter 'blobId' when calling SessionApi->DeleteBlob");

            var localVarPath = "/sessions/{sessionId}/blobs/{blobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (blobId != null) localVarPathParams.Add("blobId", this.Configuration.ApiClient.ParameterToString(blobId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBlobAsync (long? sessionId, long? blobId)
        {
             await DeleteBlobAsyncWithHttpInfo(sessionId, blobId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBlobAsyncWithHttpInfo (long? sessionId, long? blobId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DeleteBlob");
            // verify the required parameter 'blobId' is set
            if (blobId == null)
                throw new ApiException(400, "Missing required parameter 'blobId' when calling SessionApi->DeleteBlob");

            var localVarPath = "/sessions/{sessionId}/blobs/{blobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (blobId != null) localVarPathParams.Add("blobId", this.Configuration.ApiClient.ParameterToString(blobId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns></returns>
        public void DeleteDeployment (long? sessionId, string nodeId, string deploymentId)
        {
             DeleteDeploymentWithHttpInfo(sessionId, nodeId, deploymentId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDeploymentWithHttpInfo (long? sessionId, string nodeId, string deploymentId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DeleteDeployment");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SessionApi->DeleteDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling SessionApi->DeleteDeployment");

            var localVarPath = "/sessions/{sessionId}/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeploymentAsync (long? sessionId, string nodeId, string deploymentId)
        {
             await DeleteDeploymentAsyncWithHttpInfo(sessionId, nodeId, deploymentId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentAsyncWithHttpInfo (long? sessionId, string nodeId, string deploymentId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DeleteDeployment");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SessionApi->DeleteDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling SessionApi->DeleteDeployment");

            var localVarPath = "/sessions/{sessionId}/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns></returns>
        public void DeleteSession (long? sessionId)
        {
             DeleteSessionWithHttpInfo(sessionId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSessionWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DeleteSession");

            var localVarPath = "/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSessionAsync (long? sessionId)
        {
             await DeleteSessionAsyncWithHttpInfo(sessionId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSessionAsyncWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DeleteSession");

            var localVarPath = "/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Downloads binary content from the hub 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadBlob (long? sessionId, long? blobId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DownloadBlobWithHttpInfo(sessionId, blobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads binary content from the hub 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DownloadBlobWithHttpInfo (long? sessionId, long? blobId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DownloadBlob");
            // verify the required parameter 'blobId' is set
            if (blobId == null)
                throw new ApiException(400, "Missing required parameter 'blobId' when calling SessionApi->DownloadBlob");

            var localVarPath = "/sessions/{sessionId}/blobs/{blobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (blobId != null) localVarPathParams.Add("blobId", this.Configuration.ApiClient.ParameterToString(blobId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Downloads binary content from the hub 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadBlobAsync (long? sessionId, long? blobId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DownloadBlobAsyncWithHttpInfo(sessionId, blobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downloads binary content from the hub 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadBlobAsyncWithHttpInfo (long? sessionId, long? blobId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DownloadBlob");
            // verify the required parameter 'blobId' is set
            if (blobId == null)
                throw new ApiException(400, "Missing required parameter 'blobId' when calling SessionApi->DownloadBlob");

            var localVarPath = "/sessions/{sessionId}/blobs/{blobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (blobId != null) localVarPathParams.Add("blobId", this.Configuration.ApiClient.ParameterToString(blobId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets configuration from stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetConfig (long? sessionId)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GetConfigWithHttpInfo(sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets configuration from stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GetConfigWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->GetConfig");

            var localVarPath = "/sessions/{sessionId}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Gets configuration from stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetConfigAsync (long? sessionId)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GetConfigAsyncWithHttpInfo(sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets configuration from stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetConfigAsyncWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->GetConfig");

            var localVarPath = "/sessions/{sessionId}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HubInfo</returns>
        public HubInfo GetHubInfo ()
        {
             ApiResponse<HubInfo> localVarResponse = GetHubInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HubInfo</returns>
        public ApiResponse< HubInfo > GetHubInfoWithHttpInfo ()
        {

            var localVarPath = "/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHubInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HubInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HubInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HubInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HubInfo</returns>
        public async System.Threading.Tasks.Task<HubInfo> GetHubInfoAsync ()
        {
             ApiResponse<HubInfo> localVarResponse = await GetHubInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HubInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HubInfo>> GetHubInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHubInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HubInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HubInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HubInfo)));
        }

        /// <summary>
        /// Gets hub session info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>HubSession</returns>
        public HubSession GetSession (long? sessionId)
        {
             ApiResponse<HubSession> localVarResponse = GetSessionWithHttpInfo(sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets hub session info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of HubSession</returns>
        public ApiResponse< HubSession > GetSessionWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->GetSession");

            var localVarPath = "/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HubSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HubSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HubSession)));
        }

        /// <summary>
        /// Gets hub session info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of HubSession</returns>
        public async System.Threading.Tasks.Task<HubSession> GetSessionAsync (long? sessionId)
        {
             ApiResponse<HubSession> localVarResponse = await GetSessionAsyncWithHttpInfo(sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets hub session info 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (HubSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HubSession>> GetSessionAsyncWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->GetSession");

            var localVarPath = "/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HubSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HubSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HubSession)));
        }

        /// <summary>
        /// Lists currently allocated lobs 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>List&lt;BlobInfo&gt;</returns>
        public List<BlobInfo> ListBlobs (long? sessionId)
        {
             ApiResponse<List<BlobInfo>> localVarResponse = ListBlobsWithHttpInfo(sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists currently allocated lobs 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of List&lt;BlobInfo&gt;</returns>
        public ApiResponse< List<BlobInfo> > ListBlobsWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->ListBlobs");

            var localVarPath = "/sessions/{sessionId}/blobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlobInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BlobInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlobInfo>)));
        }

        /// <summary>
        /// Lists currently allocated lobs 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of List&lt;BlobInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlobInfo>> ListBlobsAsync (long? sessionId)
        {
             ApiResponse<List<BlobInfo>> localVarResponse = await ListBlobsAsyncWithHttpInfo(sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists currently allocated lobs 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (List&lt;BlobInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BlobInfo>>> ListBlobsAsyncWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->ListBlobs");

            var localVarPath = "/sessions/{sessionId}/blobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlobInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BlobInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlobInfo>)));
        }

        /// <summary>
        /// List session peers 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>List&lt;PeerInfo&gt;</returns>
        public List<PeerInfo> ListSessionPeers (long? sessionId)
        {
             ApiResponse<List<PeerInfo>> localVarResponse = ListSessionPeersWithHttpInfo(sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List session peers 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>ApiResponse of List&lt;PeerInfo&gt;</returns>
        public ApiResponse< List<PeerInfo> > ListSessionPeersWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->ListSessionPeers");

            var localVarPath = "/sessions/{sessionId}/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSessionPeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PeerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PeerInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PeerInfo>)));
        }

        /// <summary>
        /// List session peers 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of List&lt;PeerInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<PeerInfo>> ListSessionPeersAsync (long? sessionId)
        {
             ApiResponse<List<PeerInfo>> localVarResponse = await ListSessionPeersAsyncWithHttpInfo(sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List session peers 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <returns>Task of ApiResponse (List&lt;PeerInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PeerInfo>>> ListSessionPeersAsyncWithHttpInfo (long? sessionId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->ListSessionPeers");

            var localVarPath = "/sessions/{sessionId}/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSessionPeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PeerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PeerInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PeerInfo>)));
        }

        /// <summary>
        /// Lists current hub sessions. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>List&lt;HubSession&gt;</returns>
        public List<HubSession> ListSessions (int? limit = null, int? offset = null)
        {
             ApiResponse<List<HubSession>> localVarResponse = ListSessionsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists current hub sessions. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;HubSession&gt;</returns>
        public ApiResponse< List<HubSession> > ListSessionsWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HubSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<HubSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HubSession>)));
        }

        /// <summary>
        /// Lists current hub sessions. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of List&lt;HubSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<HubSession>> ListSessionsAsync (int? limit = null, int? offset = null)
        {
             ApiResponse<List<HubSession>> localVarResponse = await ListSessionsAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists current hub sessions. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;HubSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HubSession>>> ListSessionsAsyncWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HubSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<HubSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HubSession>)));
        }

        /// <summary>
        /// Sets configuration stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>long?</returns>
        public long? SetConfig (long? sessionId, Dictionary<string, Object> config)
        {
             ApiResponse<long?> localVarResponse = SetConfigWithHttpInfo(sessionId, config);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets configuration stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > SetConfigWithHttpInfo (long? sessionId, Dictionary<string, Object> config)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SetConfig");
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling SessionApi->SetConfig");

            var localVarPath = "/sessions/{sessionId}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (config != null && config.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(config); // http body (model) parameter
            }
            else
            {
                localVarPostBody = config; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Sets configuration stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> SetConfigAsync (long? sessionId, Dictionary<string, Object> config)
        {
             ApiResponse<long?> localVarResponse = await SetConfigAsyncWithHttpInfo(sessionId, config);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets configuration stash 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="config">New config stash value</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> SetConfigAsyncWithHttpInfo (long? sessionId, Dictionary<string, Object> config)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SetConfig");
            // verify the required parameter 'config' is set
            if (config == null)
                throw new ApiException(400, "Missing required parameter 'config' when calling SessionApi->SetConfig");

            var localVarPath = "/sessions/{sessionId}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (config != null && config.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(config); // http body (model) parameter
            }
            else
            {
                localVarPostBody = config; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Sends multiple commands for peer 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns></returns>
        public void UpdateDeployment (long? sessionId, string nodeId, string deploymentId, List<Command> commands)
        {
             UpdateDeploymentWithHttpInfo(sessionId, nodeId, deploymentId, commands);
        }

        /// <summary>
        /// Sends multiple commands for peer 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDeploymentWithHttpInfo (long? sessionId, string nodeId, string deploymentId, List<Command> commands)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->UpdateDeployment");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SessionApi->UpdateDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling SessionApi->UpdateDeployment");
            // verify the required parameter 'commands' is set
            if (commands == null)
                throw new ApiException(400, "Missing required parameter 'commands' when calling SessionApi->UpdateDeployment");

            var localVarPath = "/sessions/{sessionId}/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (commands != null && commands.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commands); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commands; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Sends multiple commands for peer 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDeploymentAsync (long? sessionId, string nodeId, string deploymentId, List<Command> commands)
        {
             await UpdateDeploymentAsyncWithHttpInfo(sessionId, nodeId, deploymentId, commands);

        }

        /// <summary>
        /// Sends multiple commands for peer 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="nodeId">GU Network node identifier</param>
        /// <param name="deploymentId"></param>
        /// <param name="commands"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDeploymentAsyncWithHttpInfo (long? sessionId, string nodeId, string deploymentId, List<Command> commands)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->UpdateDeployment");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SessionApi->UpdateDeployment");
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling SessionApi->UpdateDeployment");
            // verify the required parameter 'commands' is set
            if (commands == null)
                throw new ApiException(400, "Missing required parameter 'commands' when calling SessionApi->UpdateDeployment");

            var localVarPath = "/sessions/{sessionId}/peers/{nodeId}/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (commands != null && commands.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commands); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commands; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Hub session update 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns></returns>
        public void UpdateSession (long? sessionId, HubSessionCommand changes = null)
        {
             UpdateSessionWithHttpInfo(sessionId, changes);
        }

        /// <summary>
        /// Hub session update 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSessionWithHttpInfo (long? sessionId, HubSessionCommand changes = null)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->UpdateSession");

            var localVarPath = "/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (changes != null && changes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changes; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Hub session update 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSessionAsync (long? sessionId, HubSessionCommand changes = null)
        {
             await UpdateSessionAsyncWithHttpInfo(sessionId, changes);

        }

        /// <summary>
        /// Hub session update 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="changes"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSessionAsyncWithHttpInfo (long? sessionId, HubSessionCommand changes = null)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->UpdateSession");

            var localVarPath = "/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (changes != null && changes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changes; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads a binary content to the hub. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UploadBlob (long? sessionId, long? blobId, System.IO.Stream body = null)
        {
             UploadBlobWithHttpInfo(sessionId, blobId, body);
        }

        /// <summary>
        /// Uploads a binary content to the hub. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadBlobWithHttpInfo (long? sessionId, long? blobId, System.IO.Stream body = null)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->UploadBlob");
            // verify the required parameter 'blobId' is set
            if (blobId == null)
                throw new ApiException(400, "Missing required parameter 'blobId' when calling SessionApi->UploadBlob");

            var localVarPath = "/sessions/{sessionId}/blobs/{blobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (blobId != null) localVarPathParams.Add("blobId", this.Configuration.ApiClient.ParameterToString(blobId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads a binary content to the hub. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadBlobAsync (long? sessionId, long? blobId, System.IO.Stream body = null)
        {
             await UploadBlobAsyncWithHttpInfo(sessionId, blobId, body);

        }

        /// <summary>
        /// Uploads a binary content to the hub. 
        /// </summary>
        /// <exception cref="GURestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">HUB session id</param>
        /// <param name="blobId">Blob identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadBlobAsyncWithHttpInfo (long? sessionId, long? blobId, System.IO.Stream body = null)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->UploadBlob");
            // verify the required parameter 'blobId' is set
            if (blobId == null)
                throw new ApiException(400, "Missing required parameter 'blobId' when calling SessionApi->UploadBlob");

            var localVarPath = "/sessions/{sessionId}/blobs/{blobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (blobId != null) localVarPathParams.Add("blobId", this.Configuration.ApiClient.ParameterToString(blobId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (serviceToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY")))
            {
                localVarHeaderParams["X-GU-APIKEY"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APIKEY");
            }
            // authentication (systemName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME")))
            {
                localVarHeaderParams["X-GU-APPNAME"] = this.Configuration.GetApiKeyWithPrefix("X-GU-APPNAME");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
