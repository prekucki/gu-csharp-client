/* 
 * Golem unlimited low level hub API
 *
 * API description in Markdown.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
//using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GURestApi.Client.OpenAPIDateConverter;

namespace GURestApi.Model
{
    /// <summary>
    /// HubSessionCommand
    /// </summary>
    [DataContract]
    //[JsonConverter(typeof(JsonSubtypes), "CommandType")]
    //[JsonSubtypes.KnownSubType(typeof(HubSessionTouchCommand), "HubSessionTouchCommand")]
    public partial class HubSessionCommand :  IEquatable<HubSessionCommand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HubSessionCommand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HubSessionCommand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HubSessionCommand" /> class.
        /// </summary>
        /// <param name="commandType">commandType (required).</param>
        /// <param name="ts">ts.</param>
        public HubSessionCommand(string commandType = default(string), DateTime? ts = default(DateTime?))
        {
            // to ensure "commandType" is required (not null)
            if (commandType == null)
            {
                throw new InvalidDataException("commandType is a required property for HubSessionCommand and cannot be null");
            }
            else
            {
                this.CommandType = commandType;
            }
            this.Ts = ts;
        }
        
        /// <summary>
        /// Gets or Sets CommandType
        /// </summary>
        [DataMember(Name="commandType", EmitDefaultValue=false)]
        public string CommandType { get; set; }

        /// <summary>
        /// Gets or Sets Ts
        /// </summary>
        [DataMember(Name="ts", EmitDefaultValue=false)]
        public DateTime? Ts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HubSessionCommand {\n");
            sb.Append("  CommandType: ").Append(CommandType).Append("\n");
            sb.Append("  Ts: ").Append(Ts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HubSessionCommand);
        }

        /// <summary>
        /// Returns true if HubSessionCommand instances are equal
        /// </summary>
        /// <param name="input">Instance of HubSessionCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HubSessionCommand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommandType == input.CommandType ||
                    (this.CommandType != null &&
                    this.CommandType.Equals(input.CommandType))
                ) && 
                (
                    this.Ts == input.Ts ||
                    (this.Ts != null &&
                    this.Ts.Equals(input.Ts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommandType != null)
                    hashCode = hashCode * 59 + this.CommandType.GetHashCode();
                if (this.Ts != null)
                    hashCode = hashCode * 59 + this.Ts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
